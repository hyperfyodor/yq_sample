// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: task.sql

package postgres

import (
	"context"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (type, value)
VALUES ($1, $2) RETURNING id
`

type CreateTaskParams struct {
	Type  int32
	Value int32
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (int32, error) {
	row := q.db.QueryRow(ctx, createTask, arg.Type, arg.Value)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const getTaskState = `-- name: GetTaskState :one
SELECT state
FROM tasks
WHERE id = $1
`

func (q *Queries) GetTaskState(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRow(ctx, getTaskState, id)
	var state string
	err := row.Scan(&state)
	return state, err
}

const setStateToDone = `-- name: SetStateToDone :one
UPDATE tasks
SET state = 'done', last_update_time = extract(epoch from now())
WHERE id = $1 RETURNING id
`

func (q *Queries) SetStateToDone(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, setStateToDone, id)
	err := row.Scan(&id)
	return id, err
}

const setStateToProcessing = `-- name: SetStateToProcessing :one
UPDATE tasks
SET state = 'processing', last_update_time = extract(epoch from now())
WHERE id = $1 RETURNING id
`

func (q *Queries) SetStateToProcessing(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, setStateToProcessing, id)
	err := row.Scan(&id)
	return id, err
}
